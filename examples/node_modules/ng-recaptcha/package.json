{
  "_args": [
    [
      {
        "raw": "ng-recaptcha@../../",
        "scope": null,
        "escapedName": "ng-recaptcha",
        "name": "ng-recaptcha",
        "rawSpec": "../../",
        "spec": "/Users/ruslan/projects/ng2-recaptcha",
        "type": "directory"
      },
      "/Users/ruslan/projects/ng2-recaptcha/demo/examples"
    ]
  ],
  "_from": "../..",
  "_id": "ng-recaptcha@2.0.2",
  "_inCache": true,
  "_location": "/ng-recaptcha",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ng-recaptcha@../../",
    "scope": null,
    "escapedName": "ng-recaptcha",
    "name": "ng-recaptcha",
    "rawSpec": "../../",
    "spec": "/Users/ruslan/projects/ng2-recaptcha",
    "type": "directory"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "file:../..",
  "_shasum": "b40c3e82e017fc97eefc55697f1c2a12bc489aef",
  "_shrinkwrap": null,
  "_spec": "ng-recaptcha@../../",
  "_where": "/Users/ruslan/projects/ng2-recaptcha/demo/examples",
  "author": {
    "name": "Ruslan Arkhipau",
    "email": "dethariel@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/DethAriel/ng-recaptcha/issues"
  },
  "dependencies": {
    "@types/grecaptcha": "^2.0.31"
  },
  "description": "Angular component for Google reCAPTCHA",
  "devDependencies": {
    "@angular/common": "^4.0.0",
    "@angular/compiler": "^4.0.0",
    "@angular/compiler-cli": "^4.0.0",
    "@angular/core": "^4.0.0",
    "@angular/forms": "^4.0.0",
    "@angular/platform-browser": "^4.0.0",
    "@types/core-js": "^0.9.39",
    "@types/grecaptcha": "^2.0.31",
    "angular-precommit": "^1.0.3",
    "codelyzer": "^3.0.0-beta.4",
    "conventional-changelog-cli": "^1.3.1",
    "del-cli": "^0.2.1",
    "husky": "^0.13.3",
    "rxjs": "^5.2.0",
    "tslint": "^4.5.1",
    "typescript": "^2.2.1",
    "zone.js": "^0.8.5"
  },
  "gitHead": "74135a356f55c10ac838f1d1292c2277fce694c0",
  "homepage": "https://github.com/DethAriel/ng-recaptcha#readme",
  "keywords": [
    "angular",
    "recaptcha",
    "angular-recaptcha",
    "ng-recaptcha"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "ng-recaptcha",
  "optionalDependencies": {
    "@types/grecaptcha": "^2.0.31"
  },
  "peerDependencies": {
    "@angular/core": "^4.0.0 || ^2.0.0"
  },
  "readme": "# Angular component for Google reCAPTCHA\n\n## ng-recaptcha [![npm version](https://badge.fury.io/js/ng-recaptcha.svg)](http://badge.fury.io/js/ng-recaptcha)\n\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/dethariel/ng-recaptcha/master/LICENSE)\n[![Build Status](https://travis-ci.org/DethAriel/ng-recaptcha.svg?branch=master)](https://travis-ci.org/DethAriel/ng-recaptcha)\n\nA simple, configurable, easy-to-start component for handling reCAPTCHA.\n\n## RENAME NOTICE\nThis project was renamed from `ng2-recaptcha` to `ng-recaptcha` due to Angular naming guidelines. Same happened to the `npm` package (old [ng2-recaptcha](https://www.npmjs.com/package/ng2-recaptcha) was deprecated in favor of new [ng-recaptcha](https://www.npmjs.com/package/ng-recaptcha))\n\n## Table of contents\n1. [Installation](#installation)\n2. [Basic Usage](#example-basic)\n3. [Working with `@angular/forms`](#forms-ready)\n4. [API](#api)\n   * [Input Options](#api-options)\n   * [Events](#api-events)\n   * [Methods](#api-methods)\n5. [Examples](#examples)\n   * [Specifying a different language](#example-language)\n   * [Loading the reCAPTCHA API by yourself](#example-preload-api)\n   * [Usage with `required` in forms](#example-forms)\n   * [Working with invisible reCAPTCHA](#example-invisible)\n\n## <a name=\"installation\"></a>Installation\n\nThe easiest way is to install trough [npm](https://www.npmjs.com/package/ng-recaptcha):\n```\nnpm i ng-recaptcha --save\n```\n\n## <a name=\"example-basic\"></a>Basic Usage [(see in action)](https://dethariel.github.io/ng-recaptcha/)\n\nTo start with, you need to import the `RecaptchaModule` (more on that [later](#modules)):\n\n```typescript\n// app.module.ts\nimport { RecaptchaModule } from 'ng-recaptcha';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { MyApp } from './app.component.ts';\n\n@NgModule({\n  bootstrap: [MyApp],\n  declarations: [MyApp],\n  imports: [\n    BrowserModule,\n    RecaptchaModule.forRoot(), // Keep in mind the \"forRoot\"-magic nuances!\n  ],\n})\nexport class MyAppModule { }\n```\n\nOnce you have done that, the rest is simple:\n\n```typescript\n// app.component.ts\nimport { Component } from '@angular/core';\n\n@Component({\n    selector: 'my-app',\n    template: `<re-captcha (resolved)=\"resolved($event)\" siteKey=\"YOUR_SITE_KEY\"></re-captcha>`,\n}) export class MyApp {\n    resolved(captchaResponse: string) {\n        console.log(`Resolved captcha with response ${captchaResponse}:`);\n    }\n}\n```\n\n```typescript\n// boot.ts\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { MyAppModule } from './app.module.ts';\n\nplatformBrowserDynamic().bootstrapModule(MyAppModule);\n```\n\n## <a name=\"forms-ready\"></a>Working with `@angular/forms`\n\nThere are two modules available for you:\n\n```typescript\nimport { RecaptchaModule } from 'ng-recaptcha';\nimport { RecaptchaFormsModule } from 'ng-recaptcha/forms';\n```\n\nIf you want your `<re-captcha>` element to work correctly with `[(ngModel)]` directive,\nyou need to import the `RecaptchaFormsModule` into your application module (pretty much\nlike with Angular own `'@angular/forms'` module).\n\nIf you do not rely on\nAngular forms in your project, you should use the \"no-forms\" module version, as\nit does not require the `@angular/forms` package to be bundled with your code.\n\n## <a name=\"api\"></a>API\n\n### <a name=\"api-options\"></a>Input Options\n\nThe component supports this options:\n\n* `siteKey`\n* `theme`\n* `type`\n* `size`\n* `tabIndex`\n\nThey are all pretty well described in the [reCAPTCHA docs](https://developers.google.com/recaptcha/docs/display),\nso I won't duplicate it here.\n\n### <a name=\"api-events\"></a>Events\n\n* `resolved(response: string)`. Occurs when the captcha resolution value changed.\n  When user resolves captcha, use `response` parameter to send to the server for verification.\n  This parameter is equivalent to calling [`grecaptcha.getResponse`](https://developers.google.com/recaptcha/docs/display#js_api).\n\n  If the captcha has expired prior to submitting its value to the server, the component\n  will reset the captcha, and trigger the `resolved` event with `response === null`.\n\n### <a name=\"api-methods\"></a>Methods\n\n* `reset()`. Performs a manual captcha reset. This method might be useful if your form\nvalidation failed, and you need the user to re-enter the captcha.\n* `execute()`. Executes the invisible recaptcha. Does nothing if component's size is not set to \"invisible\". See [Invisible reCAPTCHA developers guide](https://developers.google.com/recaptcha/docs/invisible#js_api) for more information.\n\n## <a name=\"examples\"></a>Examples\n### <a name=\"example-language\"></a>Specifying a different language [(see in action)](https://dethariel.github.io/ng-recaptcha/language)\n\n`<re-captcha>` supports various languages. By default recaptcha will guess the user's language itself\n(which is beyond the scope of this lib).\nBut you can override this behavior and provide a specific language to use.\nThe language setting is global, though, and cannot be set on a per-captcha basis.\nIt can be provided like this:\n\n```typescript\nimport { RECAPTCHA_LANGUAGE } from 'ng-recaptcha';\n\n@NgModule({\n  providers: [\n    {\n      provide: RECAPTCHA_LANGUAGE,\n      useValue: 'fr', // use French language\n    },\n  ],\n}) export class MyModule { }\n```\n\nYou can find the list of supported languages in [reCAPTCHA docs](https://developers.google.com/recaptcha/docs/language).\n\n### <a name=\"example-preload-api\"></a>Loading the reCAPTCHA API by yourself [(see in action)](https://dethariel.github.io/ng-recaptcha/preload-api)\n\nBy default, the component assumes that the reCAPTCHA API loading will be handled\nby the `RecaptchaLoaderService`. However, you can override that by providing your\ninstance of this service to the Angular DI.\n\nThe below code snippet is an example of how such a provider can be implemented.\n\n**TL;DR**: there should be an `Observable` that eventually resolves to a\n`grecaptcha`-compatible object (e.g. `grecaptcha` itself).\n\n```html\n<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&amp;onload=onloadCallback\"></script>\n\n<script>\n    // bootstrap the application once the reCAPTCHA api has loaded\n    function onloadCallback() {\n        System.import('app').catch(function(err) { console.error(err); });\n    }\n</script>\n```\n\n```typescript\nimport { RecaptchaLoaderService } from 'ng-recaptcha';\n\n@Injectable()\nexport class PreloadedRecaptchaAPIService {\n  public ready: Observable<ReCaptchaV2.ReCaptcha>;\n\n  constructor() {\n    let readySubject = new BehaviorSubject<ReCaptchaV2.ReCaptcha>(grecaptcha);\n    this.ready = readySubject.asObservable();\n  }\n}\n\n@NgModule({\n  providers: [\n    {\n      provide: RecaptchaLoaderService,\n      useValue: new PreloadedRecaptchaAPIService(),\n    },\n  ],\n}) export class MyModule { }\n```\n\n### <a name=\"example-forms\"></a>Usage with `required` in forms [(see in action)](https://dethariel.github.io/ng-recaptcha/forms)\n\nIt's very easy to put `<re-captcha>` in an Angular form and have it `require`d - just\nadd the `required` attribute to the `<re-captcha>` element. Do not forget to import `RecaptchaFormsModule` from `'ng-recaptcha/forms'`!\n\n```typescript\n@Component({\n  selector: 'my-form',\n  template: `\n  <form>\n    <re-captcha\n      [(ngModel)]=\"formModel.captcha\"\n      name=\"captcha\"\n      required\n      siteKey=\"YOUR_SITE_KEY\"\n    ></re-captcha>\n  </form>`,\n}) export class MyForm {\n  formModel = new MyFormModel();\n}\n```\n\n### <a name=\"example-invisible\"></a>Working with invisible reCAPTCHA [(see in action)](https://dethariel.github.io/ng-recaptcha/invisible)\n\nWorking with [invisible reCAPTCHA](https://developers.google.com/recaptcha/docs/invisible) is almost the same as with regular one.\nFirst, you need to provide the right size:\n\n```html\n<re-captcha size=\"invisible\" ...></re-captcha>\n```\n\nYou will also need to invoke the [`\"execute()\"`](https://developers.google.com/recaptcha/docs/invisible#programmatic_execute) method manually. This can be done by either obtaining a reference to `RecaptchaComponent` via `@ViewChild()`, or by using inline template reference:\n\n```html\n<re-captcha #captchaRef=\"reCaptcha\" ...></re-captcha>\n...\n<button (click)=\"captchaRef.execute()\">Submit</button>\n```\n\nNormally you would only submit a form when recaptcha response has been received. This can be achieved by reacting to `(resolved)` event and invoking submit logic when the captcha response is truthy (this will not try to submit the form when recaptcha response has expired). A sample implementation would look like this:\n\n```typescript\n@Component({\n  selector: 'my-form',\n  template: `\n  <form>\n    <re-captcha\n      #captchaRef=\"reCaptcha\"\n      siteKey=\"YOUR_SITE_KEY\"\n      size=\"invisible\"\n      (resolved)=\"$event && submit($event)\"\n    ></re-captcha>\n    <button (click)=\"captchaRef.execute()\">Submit</button>\n  </form>`,\n}) export class MyForm {\n  public submit(captchaResponse: string): void {\n    this.http.post({\n      captcha: captchaResponse,\n      /* ... */\n    });\n  }\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DethAriel/ng-recaptcha.git"
  },
  "scripts": {
    "build": "npm run clean && npm run lint:prod && npm run transpile",
    "changelog": "conventional-changelog -p angular -i CHANGELOG.md -s",
    "clean": "del-cli './{recaptcha/,index,forms}*.{js,d.ts,js.map,metadata.json}' factories",
    "demo": "cd demo && bundle exec jekyll serve",
    "demo:install": "npm run transpile && cd demo/examples && npm install && cd ../.. && npm run clean",
    "lint": "npm run lint:prod -- --force",
    "lint:prod": "tslint --project ./tsconfig.json --type-check",
    "prepush": "npm run lint:prod",
    "pub": "npm run build && npm publish",
    "transpile": "ngc -p ./tsconfig.json"
  },
  "typings": "index.d.ts",
  "version": "2.0.2"
}
