{
  "name": "Ng2-recaptcha",
  "tagline": "Angular 2 + TypeScript component for Google reCAPTCHA",
  "body": "# Angular 2 + TypeScript component for Google reCAPTCHA\r\n\r\nA simple, configurable, easy-to-start component for handling reCAPTCHA. \r\n\r\n## Installation\r\n\r\n```\r\nnpm i ng2-recaptcha --save\r\n```\r\n\r\n## Usage\r\n\r\n```typescript\r\nimport { bootstrap } from '@angular/platform-browser-dynamic';\r\nimport { Component } from '@angular/core';\r\nimport { RecaptchaComponent, RecaptchaLoaderService } from 'ng2-recaptcha/ng2-recaptcha';\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    template: `\r\n        <recaptcha (resolved)=\"resolved($event)\" siteKey=\"YOUR_SITE_KEY\"></recaptcha>\r\n    `,\r\n    directives: [RecaptchaComponent],\r\n}) export class MyApp {\r\n    resolved(captchaResponse: string) {\r\n        console.log(`Resolved captcha with response ${captchaResponse}:`);\r\n    }\r\n}\r\n\r\nbootstrap(MyApp, [RecaptchaLoaderService]);\r\n```\r\n\r\n## Options\r\n\r\nThe component supports this options:\r\n\r\n* `siteKey`\r\n* `theme`\r\n* `type`\r\n* `size`\r\n* `tabIndex`\r\n\r\nThey are all pretty well described in the [reCAPTCHA docs](https://developers.google.com/recaptcha/docs/display),\r\nso I won't duplicate it here.\r\n\r\n## Events\r\n\r\n* `resolved(response: string)`. Occurs when the captcha resolution value changed. \r\n  When user resolves captcha, use `response` parameter to send to the server for verification.\r\n  This parameter is equivalent to calling [`grecaptcha.getResponse`](https://developers.google.com/recaptcha/docs/display#js_api).\r\n\r\n  If the captcha has expired prior to submitting its value to the server, the component\r\n  will reset the captcha, and trigger the `resolved` event with `response === null`.\r\n\r\n## Methods\r\n\r\n* `reset`. Performs a manual captcha reset. This method might be useful if your form\r\nvalidation failed, and you need the user to re-enter the captcha.\r\n\r\n## Specifying a different language\r\n\r\n`<recaptcha>` supports various languages. But this settings is global, and cannot be set\r\non a per-captcha basis. An example below shows you how can the default behavior be overridden.\r\n\r\n```typescript\r\nimport { bootstrap } from '@angular/platform-browser-dynamic';\r\nimport { Component, provide } from '@angular/core';\r\nimport { RecaptchaLoaderService } from 'ng2-recaptcha/ng2-recaptcha';\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: 'my-app.html',\r\n}) export class MyApp {}\r\n\r\nbootstrap(MyApp, [\r\n    provide(RecaptchaLoaderService, {\r\n        useValue: new RecaptchaLoaderService(\"fr\"),\r\n    })\r\n]);\r\n\r\n``` \r\n\r\n## Loading the reCAPTCHA API by yourself\r\n\r\nBy default, the component assumes that the reCHAPTCHA API loading will be handled\r\nby the `RecaptchaLoaderService`. However, you can override that by providing your\r\ninstance of this service to the Angular DI.\r\n\r\nThe below code snippet is an example of how such a provider can be implemented:\r\n\r\n```html\r\n<script src=\"https://www.google.com/recaptcha/api.js?render=explicit&onload=onloadCallback\"></script>\r\n\r\n<script>\r\n    // bootstrap the application once the reCAPTCHA api has loaded \r\n    function onloadCallback() {\r\n        System.import('app').catch(function(err) { console.error(err); });\r\n    }\r\n</script>\r\n```\r\n\r\n```typescript\r\nimport { bootstrap } from '@angular/platform-browser-dynamic';\r\nimport { Component, Injectable, provide } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { RecaptchaComponent, RecaptchaLoaderService } from 'ng2-recaptcha/ng2-recaptcha';\r\n\r\n@Injectable()\r\nexport class PreloadedRecaptchaAPIService {\r\n    public ready: Observable<boolean>;\r\n\r\n    constructor() { \r\n        let readySubject = new BehaviorSubject<boolean>(true);\r\n        this.ready = readySubject.asObservable();\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'my-app',\r\n    templateUrl: 'my-app.html',\r\n}) \r\nexport class MyApp {}\r\n\r\nbootstrap(MyApp, [\r\n    provide(RecaptchaLoaderService, {\r\n        useValue: new PreloadedRecaptchaAPIService(),\r\n    })\r\n]);\r\n\r\n```\r\n\r\n## License\r\n\r\nCode released under the [MIT license](./LICENSE).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}